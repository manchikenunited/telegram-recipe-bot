import os
import datetime
import asyncio
import traceback
from dotenv import load_dotenv

# --- 1. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ö–õ–Æ–ß–ï–ô ---
load_dotenv() 

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YOUR_CHAT_ID = os.getenv("YOUR_CHAT_ID")

if YOUR_CHAT_ID:
    try:
        YOUR_CHAT_ID = int(YOUR_CHAT_ID)
    except ValueError:
        print("‚ùå –û–®–ò–ë–ö–ê: YOUR_CHAT_ID –≤ .env –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        YOUR_CHAT_ID = None

# --- –ò–ú–ü–û–†–¢–´ –õ–û–ì–ò–ö–ò –ò –ë–ò–ë–õ–ò–û–¢–ï–ö ---
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
# APScheduler –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
from apscheduler.schedulers.background import BackgroundScheduler 
from apscheduler.triggers.cron import CronTrigger

# –í–∞—à–∞ –ª–æ–≥–∏–∫–∞:
from db_manager import init_db, get_exclusion_list, save_recipes, Recipe, Session
from ai_generator import generate_weekly_plan 


# --- 2. –ì–õ–ê–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê (–ê–°–ò–ù–•–†–û–ù–ù–´–ï) ---

def sync_generation_logic():
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: –ß—Ç–µ–Ω–∏–µ –ë–î, –≤—ã–∑–æ–≤ AI, –∑–∞–ø–∏—Å—å –≤ –ë–î.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (executor).
    """
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        exclusion_list = get_exclusion_list(days=21)
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
        weekly_plan_json = generate_weekly_plan(exclusion_list) 
        
        if not weekly_plan_json:
            return None, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ò–ò –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏."

        # --- –ö–û–†–†–ï–ö–¢–ò–†–£–ï–ú –§–û–†–ú–ê–¢ JSON –û–¢ –ò–ò (–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê) ---
        if isinstance(weekly_plan_json, dict):
            extracted_list = None
            for key in ['plan', 'plans', 'weekly_plan', 'menu', 'recipes']:
                if key in weekly_plan_json and isinstance(weekly_plan_json[key], list):
                    extracted_list = weekly_plan_json[key]
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∫–ª—é—á—É: '{key}'.")
                    break
            
            if extracted_list is None:
                for value in weekly_plan_json.values():
                    if isinstance(value, list):
                        extracted_list = value
                        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º—É –ø–æ–∏—Å–∫—É.")
                        break

            if extracted_list is not None:
                weekly_plan_json = extracted_list
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –ò–ò –≤–µ—Ä–Ω—É–ª —Å–ª–æ–≤–∞—Ä—å, –Ω–æ —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–Ω—É—Ç—Ä–∏.")
                return None, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON: –ò–ò –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å."
        
        if not isinstance(weekly_plan_json, list):
            print(f"‚ùå –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê —Ñ–æ—Ä–º–∞—Ç–∞: –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –Ω–æ –ø–æ–ª—É—á–µ–Ω —Ç–∏–ø {type(weekly_plan_json)}")
            return None, "‚ùå –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê —Ñ–æ—Ä–º–∞—Ç–∞ JSON: –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å."
            
        # --- –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î –ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï ---
        recipes_to_save = []
        telegram_message = "‚ú® **–í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 5 –¥–Ω–µ–π –≥–æ—Ç–æ–≤!** ‚ú®\n\n"
        
        for day_plan in weekly_plan_json:
            
            if not isinstance(day_plan, dict):
                 print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: –≠–ª–µ–º–µ–Ω—Ç '{day_plan}' –≤ —Å–ø–∏—Å–∫–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º.")
                 continue 

            try:
                # 1. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–Ω—è
                telegram_message += f"üóìÔ∏è **{day_plan['day']}** ({day_plan['date']}):\n"
                meal_date_obj = datetime.datetime.strptime(day_plan['date'], "%Y-%m-%d").date()

                for meal in day_plan['meals']:
                    
                    # --- –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –° –ë–ï–ó–û–ü–ê–°–ù–´–ú–ò –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ (.get()) ---
                    kzhbu_info = meal.get('total_kzhbu_for_two', '–ö–ñ–ë–£: –†–∞—Å—á–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå').strip()
                    weight_m = meal.get('weight_m', 'N/A')
                    weight_w = meal.get('weight_w', 'N/A')
                    meal_type = meal.get('type', '–ü—Ä–∏–µ–º –ø–∏—â–∏')
                    meal_name = meal.get('meal_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ')
                    recipe_full = meal.get('recipe_full', '–ù–µ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞')
                    
                    if not kzhbu_info or kzhbu_info == 'N/A':
                        kzhbu_info = "–ö–ñ–ë–£: –†–∞—Å—á–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå"
                    
                    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ DB
                    full_recipe_text = (
                        f"**–°—É–º–º–∞—Ä–Ω–æ–µ –ö–ñ–ë–£ (–Ω–∞ –¥–≤–æ–∏—Ö):** {kzhbu_info}\n\n"
                        f"**--- –†–ï–¶–ï–ü–¢ ---**\n"
                        f"{recipe_full}"
                    )
                    
                    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è
                    meal_line = (
                        f"   - **{meal_type}:** {meal_name}\n"
                        f"     (–°—É–º–º–∞—Ä–Ω–æ–µ –ö–ñ–ë–£: {kzhbu_info})\n" 
                        f"     _–ü–æ—Ä—Ü–∏–∏:_ (–ú: {weight_m}–≥, –ñ: {weight_w}–≥)\n" 
                    )
                    telegram_message += meal_line
                    # -------------------------------------------------------------------
                    
                    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ë–î
                    recipes_to_save.append({
                        'meal_date': meal_date_obj,
                        'meal_name': meal_name,
                        'recipe_full': full_recipe_text 
                    })
                
                telegram_message += "\n"
                
            except KeyError as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–ª—é—á–∞—Ö JSON: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á {e} (day, date, meals) –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –¥–Ω—è/–±–ª—é–¥–∞.")
                continue 

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
        save_recipes(recipes_to_save)
        
        return telegram_message, None

    except Exception as e:
        error_trace = traceback.format_exc()
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–ù–£–¢–†–ï–ù–ù–ï–ô –õ–û–ì–ò–ö–ò:\n{error_trace}")
        return None, f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –°–º. –∫–æ–Ω—Å–æ–ª—å."


async def generate_and_send_weekly(context: ContextTypes.DEFAULT_TYPE):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    """
    print("--- üöÄ –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í: –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. ---")

    loop = asyncio.get_running_loop() 
    
    telegram_message, error_message = await loop.run_in_executor(
        None, 
        sync_generation_logic
    )

    final_text = telegram_message if telegram_message else error_message
    parse_mode = 'Markdown' if telegram_message else None
    
    if YOUR_CHAT_ID:
        await context.bot.send_message(
            chat_id=YOUR_CHAT_ID, 
            text=final_text, 
            parse_mode=parse_mode
        )
    print("--- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ---")


async def send_daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –¥–µ—Ç–∞–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–∫–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /today.
    """
    current_date = datetime.date.today() 
    print(f"--- ‚è∞ –ó–∞–ø—Ä–æ—Å –º–µ–Ω—é –Ω–∞ {current_date}. ---")

    def sync_get_recipes():
        session = Session()
        try:
            today_recipes = session.query(Recipe).filter(
                Recipe.meal_date == current_date
            ).all()
            return today_recipes
        finally:
            session.close()

    loop = asyncio.get_running_loop()
    today_recipes = await loop.run_in_executor(None, sync_get_recipes)


    if not today_recipes and YOUR_CHAT_ID:
        await context.bot.send_message(
            chat_id=YOUR_CHAT_ID,
            text=f"ü§î –ù–∞ —Å–µ–≥–æ–¥–Ω—è ({current_date.strftime('%d.%m.%Y')}) –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /generate_test."
        )
        return

    # 2. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è 
    reminder_message = f"üîî **–í–∞—à–µ –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, {current_date.strftime('%d.%m.%Y')}!** üîî\n\n"
    
    for recipe in today_recipes:
        reminder_message += f"üçΩÔ∏è **{recipe.meal_name}**\n\n"
        reminder_message += f"{recipe.recipe_full}\n\n---\n\n" 
        
    if YOUR_CHAT_ID:
        await context.bot.send_message(
            chat_id=YOUR_CHAT_ID,
            text=reminder_message,
            parse_mode='Markdown'
        )
    print(f"--- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {current_date} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ---")


# --- 3. –ö–û–ú–ê–ù–î–´ TELEGRAM ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n"
        f"ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: **{YOUR_CHAT_ID}**.\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /generate_test, /today, /clear_history."
    )

async def generate_test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /generate_test –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    if not YOUR_CHAT_ID or str(update.effective_chat.id) != str(YOUR_CHAT_ID):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —Ç–æ–ª—å–∫–æ –≤ –µ–≥–æ —á–∞—Ç–µ.")
        return

    await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–µ–Ω—é (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 20 —Å–µ–∫—É–Ω–¥)...")

    await generate_and_send_weekly(context)
    
    await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /today –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å."""
    if not YOUR_CHAT_ID or str(update.effective_chat.id) != str(YOUR_CHAT_ID):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —Ç–æ–ª—å–∫–æ –≤ –µ–≥–æ —á–∞—Ç–µ.")
        return

    await update.message.reply_text("üîé –ò—â—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
    await send_daily_reminder(context)
    
    
def sync_clear_history_logic():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã Recipe."""
    session = Session()
    try:
        num_deleted = session.query(Recipe).delete()
        session.commit()
        return f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {num_deleted} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤. –ò—Å—Ç–æ—Ä–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω–∞!"
    except Exception as e:
        session.rollback()
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}"
    finally:
        session.close()


async def clear_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /clear_history –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    if not YOUR_CHAT_ID or str(update.effective_chat.id) != str(YOUR_CHAT_ID):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —Ç–æ–ª—å–∫–æ –≤ –µ–≥–æ —á–∞—Ç–µ.")
        return

    await update.message.reply_text("üóëÔ∏è –ó–∞–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)...")
    
    loop = asyncio.get_running_loop()
    result_message = await loop.run_in_executor(
        None, 
        sync_clear_history_logic
    )
    
    await update.message.reply_text(result_message)


# --- 4. –û–°–ù–û–í–ù–ê–Ø –°–ò–ù–•–†–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---

def main() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î, –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –±–æ—Ç–∞."""
    
    if not TELEGRAM_TOKEN or not YOUR_CHAT_ID:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω Telegram –∏–ª–∏ ID —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        return

    init_db() 
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # --- –ë–õ–û–ö –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê (–ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù –î–õ–Ø –†–£–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø) ---
    # scheduler = BackgroundScheduler()
    # 
    # # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 10:00
    # scheduler.add_job(
    #     generate_and_send_weekly, 
    #     trigger=CronTrigger(day_of_week='sun', hour='10', minute='0'),
    #     id='weekly_generation',
    #     name='Weekly Recipe Generation',
    #     args=[application] 
    # )
    # 
    # # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ë—É–¥–Ω–∏, 07:00
    # scheduler.add_job(
    #     send_daily_reminder, 
    #     trigger=CronTrigger(day_of_week='mon-fri', hour='7', minute='0'),
    #     id='daily_reminder',
    #     name='Daily Meal Reminder',
    #     args=[application] 
    # )
    # 
    # scheduler.start()
    # print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ó–∞–¥–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    # ----------------------------------------------------------------------

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("generate_test", generate_test_command))
    application.add_handler(CommandHandler("today", today_command))
    application.add_handler(CommandHandler("clear_history", clear_history_command))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
